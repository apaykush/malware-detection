import numpy as np
import pandas as pd
import os
from pathlib import Path
from tqdm import tqdm
from sklearn.cluster import MiniBatchKMeans, Birch

def insert_row(df, row):
    insert_loc = df.index.max()
    if pd.isna(insert_loc):
        df.loc[0] = row
    else:
        df.loc[insert_loc + 1] = row

def extract_features(folder_path, malware_class):
    column_names = list(range(256)) + ['entropy', 'class']
    df = pd.DataFrame(columns=column_names)
    files = Path(folder_path).rglob("*")
    for file in tqdm(files):
        if os.path.isdir(file):
            continue
        count = 0.0
        bytes_arr = [0] * 256
        with open(file, "rb") as f:
            text = f.read()
            count += len(text)
            for byte in text:
                bytes_arr[byte] += 1
        count -= bytes_arr[0]
        entropy = 0
        for i in range(256):
            bytes_arr[i] /= count
            if bytes_arr[i] and i > 0:
                entropy -= bytes_arr[i] * np.log2(bytes_arr[i])
        insert_row(df, bytes_arr + [entropy, malware_class])
    df.drop(columns=[0], inplace=True)
    return df

def byte_frequency(folder_path, include_zero=True):
    column_names = list(range(256))
    df = pd.DataFrame(columns=column_names)
    files = Path(folder_path).rglob("*")
    for file in tqdm(files):
        if os.path.isdir(file):
            continue
        count = 0.0
        bytes_arr = [0] * 256
        with open(file, "rb") as f:
            text = f.read()
            count += len(text)
            for byte in text:
                bytes_arr[byte] += 1
        insert_row(df, bytes_arr)
    if not include_zero:
        df.drop(columns=[0], inplace=True)
    return df

def compute_idf(word, df):
    return np.log2(len(df) / sum(df[word] > 0))

def extract_all_features_without_zero(folder_path, malware_class):
    column_names = list(range(256)) + ['entropy', 'class']
    df = pd.DataFrame(columns=column_names)
    files = Path(folder_path).rglob("*")
    names = []
    for file in tqdm(files):
        if os.path.isdir(file):
            continue
        count = 0.0
        bytes_arr = [0] * 256
        names.append(str(file))
        with open(file, "rb") as f:
            text = f.read()
            count += len(text)
            for byte in text:
                bytes_arr[byte] += 1
        count -= bytes_arr[0]
        entropy = 0
        for i in range(256):
            bytes_arr[i] /= count
            if bytes_arr[i] and i > 0:
                entropy -= bytes_arr[i] * np.log2(bytes_arr[i])
        insert_row(df, bytes_arr + [entropy, malware_class])
    df.drop(columns=[0], inplace=True)
    return df, names

def get_all_features(include_zero=True):
    test_features, names_test = extract_all_features_without_zero(TEST_FOLDER, 2)
    X = test_features
    names = names_test
    freq_df_test = byte_frequency(TEST_FOLDER, include_zero=False)
    freq_df = freq_df_test
    poss_range = range(1, 256)
    column_names = list(poss_range)
    append_str = "tfidf"
    tfidf_columns = [append_str + str(sub) for sub in column_names]
    df = pd.DataFrame(columns=tfidf_columns)
    idf_list = [compute_idf(i, freq_df) for i in poss_range]
    for i in range(len(X)):
        tfidf_list = np.array(X.loc[i,])[:-2] * idf_list
        insert_row(df, tfidf_list)
    return pd.concat([X, df], axis=1), names

def process_data(all_features=True, selected_features=[]):
    print('Data processing... Please, wait')
    X_res, names = get_all_features(include_zero=False)
    print('Data processing... DONE')
    X_res.drop(columns='class', inplace=True)
    if not all_features:
        X_res = X_res[selected_features]
    
    report = '''Report contains:
File name
Class label
Mini-batch k-means:
'''
    mbkm = MiniBatchKMeans(n_clusters=2, batch_size=10)
    mbkm.fit(X_res)
    predict_labels = mbkm.labels_
    for i, (name, label) in enumerate(zip(names, predict_labels), start=1):
        report += f'{i}) {name}\n class={label}\n'
    
    birch = Birch(n_clusters=2, threshold=0.001)
    birch.fit(X_res)
    predict_labels = birch.labels_
    report += '\nBIRCH:\n'
    for i, (name, label) in enumerate(zip(names, predict_labels), start=1):
        report += f'{i}) {name}\n class={label}\n'
    
    with open(os.path.join(REPORT_FOLDER, 'report.txt'), 'w') as f:
        f.write(report)
    print('Report saved in folder ' + REPORT_FOLDER)
    print(report)
