from tensorflow.keras import layers, models, regularizers

def create_cnn_lstm_model(max_len, n_class, bidirectional=False):
    cnn_lstm_model = models.Sequential()
    cnn_lstm_model.add(layers.Conv1D(
        filters=30, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu', input_shape=(max_len, 1)
    ))
    cnn_lstm_model.add(layers.MaxPool1D(5))
    cnn_lstm_model.add(layers.Conv1D(
        filters=50, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu'
    ))
    cnn_lstm_model.add(layers.MaxPool1D(5))
    cnn_lstm_model.add(layers.Conv1D(
        filters=90, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu'
    ))
    cnn_lstm_model.add(layers.MaxPool1D(5))
    
    if bidirectional:
        cnn_lstm_model.add(layers.Bidirectional(
            layers.LSTM(units=128, dropout=0.2, recurrent_dropout=0.2)
        ))
    else:
        cnn_lstm_model.add(layers.LSTM(
            units=128, dropout=0.2, recurrent_dropout=0.2
        ))
    
    cnn_lstm_model.add(layers.Dense(n_class, activation='softmax'))
    cnn_lstm_model.compile(
        optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']
    )
    
    return cnn_lstm_model

def create_cnn_model(max_len, n_class):
    cnn_model = models.Sequential()
    cnn_model.add(layers.Conv1D(
        filters=30, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu', input_shape=(max_len, 1)
    ))
    cnn_model.add(layers.MaxPool1D(5))
    cnn_model.add(layers.Conv1D(
        filters=50, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu'
    ))
    cnn_model.add(layers.MaxPool1D(5))
    cnn_model.add(layers.Conv1D(
        filters=90, kernel_size=7, strides=1,
        kernel_regularizer=regularizers.l2(0.01),
        activation='relu'
    ))
    cnn_model.add(layers.MaxPool1D(5))
    
    cnn_model.add(layers.Flatten())
    cnn_model.add(layers.Dropout(0.2))
    cnn_model.add(layers.Dense(256, activation='relu'))
    cnn_model.add(layers.Dropout(0.3))
    cnn_model.add(layers.Dense(n_class, activation='softmax'))
    
    cnn_model.compile(
        optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']
    )
    
    return cnn_model
